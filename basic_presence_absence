# Species distribution modeling for saguaro
# Jeff Oliver
# jcoliver@email.arizona.edu
# 2023-08-08

## I adapted the code from this dude ^^ who put together a v nice vingette 
## https://jcoliver.github.io/learn-r/011-species-distribution-models.html

## The adaptation basically consists of it now running off presence absence data 
## Rather than presence + psuedoabsence 
## It works BADLY if you have zero inflated data (as the dataset im working with does)

# Load required libraries
library(terra)
library(geodata)
library(predicts)
library(PresenceAbsence)
library(raster)

# Download data for the bioclimatic variables
bioclim_data <- worldclim_global(var = "bio",
                                 res = 10,
                                 path = "~/Documents/PhD/mccart/input/datasets/")

# Read in saguaro observations
obs_data <- read.csv(file = "~/Documents/PhD/mccart/input/datasets/for_sdm_package.csv")
absence <- read.csv("~/Documents/PhD/mccart/input/datasets/background_for_sdm.csv")
presence <- read.csv("~/Documents/PhD/mccart/input/datasets/apicystis_combined_for_testing.csv")


# Determine geographic extent of our data
max_lat <- 80
min_lat <- -80
max_lon <- 180
min_lon <- -180
geographic_extent <- ext(x = c(min_lon, max_lon, min_lat, max_lat))

# Make an extent that is 10% larger for sampling
sample_extent <- geographic_extent * 1

# Crop bioclim data to desired extent
bioclim_data <- terra::crop(x = bioclim_data, y = sample_extent)

# Download data with geodata's world function to use for our base map
world_map <- world(resolution = 3,
                   path = "data/")

# Crop the map to our area of interest
my_map <- crop(x = world_map, y = geographic_extent)

# Plot the base map
plot(my_map,
     axes = TRUE, 
     col = "grey95")

# Add the points for individual observations
points(x = obs_data$longitude, 
       y = obs_data$latitude, 
       col = "olivedrab", 
       pch = 20, 
       cex = 0.75)

# Make an extent that is 25% larger
sample_extent <- geographic_extent * 1.25

# Crop bioclim data to desired extent
bioclim_data <- crop(x = bioclim_data, y = sample_extent)

# Plot the first of the bioclim variables to check on cropping
plot(bioclim_data[[1]])

presence <- read.csv("~/Documents/PhD/mccart/input/datasets/apicystis_combined_for_testing.csv")

presence$pa <- 1

absence <- read.csv("~/Documents/PhD/mccart/input/datasets/background_for_sdm.csv")

absence$pa <- 0

all_points <- rbind(presence, absence)

# Reality check on data
head(all_points)


### NOTE UNLOAD TIDYR OR IT WONT WORK BECAUSE R IS STUPID 
bioclim_extract <- extract(x = bioclim_data,
                           y = all_points[, c("longitude", "latitude")],
                           ID = FALSE) # No need for an ID column


# Add the point and climate datasets together
points_climate <- cbind(all_points, bioclim_extract)

# Identify columns that are latitude & longitude
drop_cols <- which(colnames(points_climate) %in% c("longitude", "latitude"))
drop_cols # print the values as a reality check

# Remove the geographic coordinates from the data frame
points_climate <- points_climate[, -drop_cols]

# Create vector indicating fold
fold <- folds(x = points_climate,
              k = 5,
              by = points_climate$pa)

table(fold)

testing <- points_climate[fold == 1, ]
training <- points_climate[fold != 1, ]

# Build a model using training data
glm_model <- glm(pa ~ ., data = training, family = binomial())

# Get predicted values from the model
glm_predict <- predict(bioclim_data, glm_model, type = "response")

# Print predicted values
plot(glm_predict)

# Use testing data for model evaluation
glm_eval <- pa_evaluate(p = testing[testing$pa == 1, ],
                        a = testing[testing$pa == 0, ],
                        model = glm_model,
                        type = "response")

# Determine minimum threshold for "presence"
glm_threshold <- glm_eval@thresholds$max_spec_sens

# Plot base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95")

# Only plot areas where probability of occurrence is greater than the threshold
plot(glm_predict > glm_threshold, 
     add = TRUE, 
     legend = FALSE, 
     col = "olivedrab")

# And add those observations
points(x = obs_data$longitude, 
       y = obs_data$latitude, 
       col = "black",
       pch = "+", 
       cex = 0.75)

# Redraw those country borders
plot(my_map, add = TRUE, border = "grey5")

glm_predict > glm_threshold

# Plot base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95")

# Only plot areas where probability of occurrence is greater than the threshold
plot(glm_predict > glm_threshold, 
     add = TRUE, 
     legend = FALSE, 
     col = c(NA, "olivedrab")) # <-- Update the values HERE

# And add those observations
points(x = obs_data$longitude, 
       y = obs_data$latitude, 
       col = "black",
       pch = "+", 
       cex = 0.75)

# Redraw those country borders
plot(my_map, add = TRUE, border = "grey5")
